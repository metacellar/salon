* Category Theory
  
** Where did I come from?
   1. Learn =python=, naturally fall in love with the concise syntax of
      it's =list-comprehension=, and eventually replaced all my =for=
      loops with it.
   2. Got a sense of functional programming, and started to learn
      =Scala=, along with the thoughts of =SICP=.
   3. =map=, =flatMap=, =filter=, =reduce=, =fold=, etc. All of these
      wonderful functions are great indeed, but, what's the magic behind
      them?

   for example, we know that
   #+begin_src python
     [x * x for x in range(10)]
   #+end_src

   is exactly
   #+begin_src python
     list(map(lambda x: x * x, range(10)))
   #+end_src

   that's an easy trick indeed, but what about this one?
   #+begin_src python
     [x * y for x in range(10) for y in range(10)]
   #+end_src

   1-min to figure out...
  
   it's easy to represent using =for= loops,
   #+begin_src python
     ls = []
     for x in range(10):
        for y in range(10):
           ls.append(x * y)
   #+end_src

   and we know that the results are the same.

   but as a syntactic-sugar, what exactly the interpreter does when we
   type the =list-comprehension= above? How does it *compose* the two
   =for= segment in it?
   #+begin_src python
     reduce(list.__add__, map(lambda x: map((lambda x, y: x * y), range(10)), range(10)))
   #+end_src

   This leads me the realm of =Category Theory=. As a theory foundation
   of the functional code I write so that I know there can be no bug
   hide in those structures.

** What is Category Theory?

   #+begin_quote
   什么时候陈老师就可以不教离散数学了？等你们那些编程语言达到我离散数学
   语言的高度，我陈老师就可以不教离散数学了。

   ------陈老师
   #+end_quote 
   
   Let's start with an image.
   #+ATTR_ORG: :width 600
   [[./img/math-map.jpg]]

   It says that category theory is the Mathematics of Mathematics.
   From a very high perspective, when the abstraction erase all the
   "non-necessary" details, All the branch of Mathematics loops the same.
   =Category theory= study about the common properties of all those
   different branch of Mathematics.

** Category: The essence of composition
   
   A category consist of =Objects= and =Arrows= goes between them.

   An =Arrow= is called =Morphism= in category theory, Let's think of
   functions in programming languages (actually procedures that mimic
   functions).

   If a function =f= takes a value of type =A= and returns a =B=, and
   another function =g= takes a =B= and returns a =C=. We can compose
   them by passing the value of =f= to =g=, and now we have defined a
   new function that takes =A= and returns =B=

   =g ∘ f= as "=g= after =f="

*** Properties of composition
    - composition is Associable
 
    #+begin_quote
    h ∘ (g ∘ f) = (h ∘ g) ∘ f = h ∘ g ∘ f
    #+end_quote

    - For every object A, there is an arrow called =unit=, which goes
      from =A= to =A=, and thus:
 
    #+begin_quote
    f ∘ id(A) = f

    id(A) ∘ f = f
    #+end_quote

    
*** The essence of programming
    Remember what's the element of programming in the book =SICP=?

    - primitive expressions, which represent the simplest entities the
      language is concerned with
      
    - means of combination, by which compound elements are built from
      simpler ones
      
    - means of abstraction, by which compound elements can be named and
      manipulated as units.
     
    the essence of programming is composition, remember the example of
    square root?

** Types and Categorys

   Types are not necessary for programming, consider an extreme example:
   machine language, all programming languages are compiled to machine
   language in one way or another.

   So why do we need types? can we just write code without types? sure
   we can, any monkey given a keyboard and plenty of time can produce
   random bytes that would accept and run. But we human want something
   meaningful, offload our burden into machines so that we could focus
   on what really important and matters.

   consider this:
   #+begin_src scala
    def x: Int
   #+end_src

   when we declare ~x~ with type ~Int~, what we are trying to say is that ~x~
   is an element of *set* ~Int~, range from -2147483648 to 2147483647.

   Sets are a very special category (and a nice one!), because in fact
   we can pick elements inside a set, and learn it's property by the
   oprations of these elements.

   For example:
   #+begin_src scala
    def isPositive(x: Int): Bool = x > 0
   #+end_src

   #+begin_src
    > isPositive(2)
    true

    > isPositive(-2)
    false
   #+end_src

   Now in the world of category, we cannot look inside of an object,
   from the function(morphism) above, all we can know is that it maps
   from ~Int~ to ~Bool~

   #+begin_src dot :file img/int_bool.png :cmdline -Tpng :exports results :cache yes
    digraph G {
      size="2,2"
      Int -> Bool
    }
   #+end_src

   #+results[0a3c34204d439be68e9170896bb9ba06520a04ba]:
   [[file:img/int_bool.png]]

   #+begin_src scala
    def myprint(x: String) = print(x)

    def myexception(x: Int) = throw new RuntimeException("wrong!")
   #+end_src

   yet what are the return type of the functions above?

*** Example of types
    apart from the usual types we meet every day, when considering types
    are actually set, we can study some very special types.

**** Empty set and Nothing
     so what's the simplist set?

     It't empty set!
     in scala, we have a type called ~Nothing~ representing the empty set,
     and of cause we cannot construct a value of this type!

     now we can define a function:
     #+begin_src scala
     def absurd[A]: Nothing => A
     #+end_src

     quite true of its name, we cannot even call the function because of
     there aren't any value of the type ~Nothing~, and the function
     ~myexception~'s return type is of cause ~Nothing~

**** Singleton set and Unit
     if a type has only one value, then it can represent any thing we
     want it be singleton!

     #+begin_src scala
      def f44: Unit => Int = _ => 44
     #+end_src

     in scala we have a type default to represent the singleton type, as
     a function accept whatever value and return 44, or a function takes
     a ~String~ and return something we don't care.

**** Two element set and Bool
     if a type has two value, what is it? It's bool!

     #+begin_src scala
      sealed trait Bool
      case object True extends Bool
      case object False extends Bool

      def x: Boolean
     #+end_src

     and of cause it so useful that we have built-in types in almost
     every programming language...

** Product and coproduct

*** Isomorphism

    In category theory, we don't know if two object are the same, we
    cannot know if two object are the same. Yet we if two
    arrows(morphisms) are the same are well defined.

    so now, we can define isomorphism

    #+begin_src dot :file img/isomorphism.png :cmdline -Tpng :exports results :cache yes
     digraph G {
       size="4,4"
       rankdir="LR"
       a -> b [label="f"]
       b -> a [label="g"]
       a -> a [label=<id<SUB>a</SUB>>]
       b -> b [label=<id<SUB>b</SUB>>]
     }
    #+end_src

    #+results[ee07ab296ff3a37a46eb6603612891229b023d3e]:
    [[file:img/isomorphism.png]]

    #+begin_quote
    g ∘ f = id_a

    f ∘ g = id_b
    #+end_quote

    so we can say that f and g are the inverse of each other.

*** Initial object and Terminal object
**** Initial Object
     Consider a category with a bunch of objects and with many morphisms
     as arrows, like a web, if there is one, the initial object has a
     morphism to every other objects.

     #+begin_src dot :file img/initial.png :cmdline -Tpng :exports results :cache yes
      digraph G {
        size="8,6"
        rankdir="BT"
        InitialObject -> a
        InitialObject -> b
        InitialObject -> c
        InitialObject -> d
        a -> b
        c -> a
      }
     #+end_src

     #+results[aeb759cfc1bdc4b73945203f627c14195008e1f2]:
     [[file:img/initial.png]]

     and of cause there can be multiple objects that can be the candidate
     of initial object, but according to the definition of initial
     object, they must have the unique isomorphism, so the inital object
     is unique up to isomorphism.

     As for our types, it is our ~Nothing~ type!

     and the morphisms from initial object to every other object in
     types is ~absurd~, so yeah I can give you anything, as long as you
     give me a value of ~Nothing~ :)

**** Terminal Object
     Also, consider a category with a bunch of objects, there can be an
     object that has morphisms from every other object to it.

     #+begin_src dot :file img/terminal.png :cmdline -Tpng :exports results :cache yes
      digraph G {
        size="8,6"
        rankdir="BT"
        a -> b
        c -> a
        a -> TerminalObject
        b -> TerminalObject
        c -> TerminalObject
        d -> TerminalObject
      }
     #+end_src

     #+results[a5219db0d0bcc3a6707c587a66a0f37802b1e283]:
     [[file:img/terminal.png]]

     it pretty clear that we have functions in our programming languages
     that won't return any value (Actually it's that we don't care its
     value)

     #+begin_src scala
      def unit[A]: A => Unit = _ => ()
     #+end_src

     and again, Terminal object is unique up to isomorphism.

**** Duality
     As we can see, initail object and terminal object has some sort of
     symmetry in the shape, the only difference between them are the
     direction of the morphisms.

     It's a very important property of categorys, we shall see the
     example soon.

*** Product and Coproduct

**** Product
     In Set theory, product is our old friend as we call it Cartesian
     product.

     Can we generailize product to other categories?

     All we that we know is a Cartesian product is a set that has two
     part that can be project into two sets:

     #+begin_src scala
      def first[A, B]: (A, B) => A = {
        case (x, y) => x
      }
      first((1, "haha"))
      1
      def second[A, B]: (A, B) => B = {
        case (x, y) => y
      }
      second((1, "haha"))
      "haha"
     #+end_src

     voila! now we have three types and two functions like this:
     #+begin_src dot :file img/cartisian_product.png :cmdline -Tpng :exports results :cache yes
      digraph G {
        size="4,4"
        rankdir="TB"
        c -> a [label="p"]
        c -> b [label="q"]
      }
     #+end_src

     #+results[0063e969386cd52eededcf1a5aa80b738b1536dd]:
     [[file:img/cartisian_product.png]]

     and of cause we can have a lot of objects that met this
     requirement, so which one of them is our product?

     #+begin_src dot :file img/mutiple_product.png :cmdline -Tpng :exports results :cache yes
      digraph G {
        size="4,4"
        rankdir="TB"
        c1 -> a
        c1 -> b
        c2 -> a
        c2 -> b
        c3 -> a
        c3 -> b
        c4 -> a
        c4 -> b
      }
     #+end_src

     #+results[e89bca492dba49de00fb98259bcf954501d3e497]:
     [[file:img/mutiple_product.png]]

     For example, can ~Int~ be our candidate product of ~Int~ and ~Bool~? Yes
     it can!

     #+begin_src scala
      def p: Int => Int = x => x
      def q: Int => Boolean = _ => True
     #+end_src

     It's sucks yet it met our requirement. And consider another one:
     ~(Int, Int, Bool)~, again it can!

     #+begin_src scala
      def p: (Int, Int, Boolean) => Int = {
        case (x, y, z) => x
      }
      def q: (Int, Int, Boolean) => Boolean = {
        case (x, y, z) => z
      }
     #+end_src

     So what's the problem? We might notice that the first one is too
     small it has not enought information, and the second one is too
     large that it loses informations when project.

     We can define a ranking of all of our candidates: if there are a
     unique morphism ~m~ from =c'= to =c=, then =c= is better than =c'=.
     #+begin_src dot :file img/product.png :cmdline -Tpng :exports results :cache yes
      digraph G {
        size="4,4"
        rankdir="TB"
        cprimer[label="c'"]
        cprimer -> c[label="m"]
        c -> a[label="p"]
        c -> b[label="q"]
        cprimer -> a[label="p'"]
        cprimer -> b[label="q'"]
      }
     #+end_src

     #+results[d7072a637c45b14fff4697ffeba7203f4a477d4a]:
     [[file:img/product.png]]

     #+begin_quote
     p' = p ∘ m

     q' = q ∘ m
     #+end_quote

     Now we shall see our two cases.

     For the first case:
     #+begin_src scala
      def m: Int => (Int, Boolean) = x => (x, true)
     #+end_src

     now ~p~ and ~q~ of it will be
     #+begin_src scala
      def p: Int => Int = x => first(m(x)) // x
      def p: Int => Boolean = x => second(m(x)) // true
     #+end_src

     For the second case, ~m~ seems to be unique:

     #+begin_src scala
      def m: (Int, Int, Boolean) => (Int, Boolean) = {
        case (x, _, z) => (x, z)
      }
     #+end_src

     We said that ~(Int, Boolean)~ is better, according to our definition
     of betterness, can we find an ~m1~, so that we can recontruct ~first~
     and ~second~ from ~p~ and ~q~ by compose ~m1~ with them?

     #+begin_src scala
     first == p compose m1
     second == q compose m1
     #+end_src

     For the first case: q is always true, and if we get a false then
     there will be no way to reconstruct it.

     For the other one: we can have infinite ~m1~

     #+begin_src scala
      def m1: ((Int, Boolean)) => (Int, Int, Boolean) = {
        case (x, b) => (x, x, b)
      }
      def m1: ((Int, Boolean)) => (Int, Int, Boolean) = {
        case (x, b) => (x, 42, b)
      }
     #+end_src

     Anyway, with the ranking system introduced, we can define the best
     object that fits our requriment as our product.
**** Coproduct
     think of duality, if we inverse the arrows, we shall get a new
     thing called coproduct.

     #+begin_src dot :file img/coproduct.png :cmdline -Tpng :exports results :cache yes
      digraph G {
        size="4,4"
        rankdir="TB"
        cprimer[label="c'"]
        c -> cprimer[label="m"]
        a -> c[label="i"]
        b -> c[label="j"]
        a -> cprimer[label="i'"]
        b -> cprimer[label="j'"]
      }
     #+end_src

     #+results[f99b46eb43af74f1f94cfab451ec780aeab110fc]:
     [[file:img/coproduct.png]]

     and the ranking changes also, if a unique morphism connecting our
     =c= to any other =c'=, then it's called coproduct.

     As programmers we are familiar with coproduct as well: Sum type, or
     distinct union.

     #+begin_src scala
      sealed trait Contact
      case class PhoneNum(num: Int) extends Contact
      case class EmailAddr(addr: String) extends Contact
     #+end_src

     a more generic type called ~Either~ in scala
     #+begin_src scala
      sealed trait Either[A, B]
      case class Left[A](v: A) extends Either[A, Nothing]
      case class Right[B](v: B) extends Either[Nothing, B]
     #+end_src

     Like the sum of types.

** ADT

   Now, with the foundation we have built, let's meet some mighty
   friends.

   Let's dig the properties of Product.

*** Commutative of Product
    A product is not strictly commutative, a ~(Int, Boolean)~ is not a
    ~(Boolean, Int)~, yet they are, however, commutative up to
    isomorphism.

    #+begin_src scala
     def swap[A, B]: (A, B) => (B, A) = {
       case (x, y) => (y, x)
     }
    #+end_src

    and the inverse of ~swap~ is ~swap~ itself.

*** Associative of Product
    By embedding, we can store an arbitrary numbers of types into a
    product, and we can have it in two ways:

    ~((a, b), c)~ or ~(a, (b, c))~

    and again, up to isomorphism they are associative:

    #+begin_src scala
     def alpha[A, B, C]: ((A, B), C) => (A, (B, C)) = {
       case ((x, y), z) => (x, (y, z))
     }
     def alpha_inv[A, B, C]: (A, (B, C)) => ((A, B), C) = {
       case (x, (y, z)) => ((x, y), z)
     }
    #+end_src

*** Unit of Product
    What's the identity of product?

    it's ~(a, ())~, again it contains the same amount of infomations as
    ~a~, and this product has id up to isomorphism.
    #+begin_src scala
     def rho[A]: (A, Unit) => A {
       case (x, ()) => x
     }
     def rho_inv[A]: A => (A, Unit) = x => (x, ())
    #+end_src

*** Property of Product
    Now with commutative, associative and unit, Eureka! it's a
    Commutative monoid category.

*** Property of Coproduct
    Guess what, copruduct is also a commutative monoid up to
    isomorphism!

*** Combine the two

    Product is like the product in algebra, and Coproduct is like the
    sum in algebra, let's see together, the two should have some
    properties.

    for example, we know that in algebra, =a * 0 = 0=, how about here?

    what is ~(A, Nothing)~?, because we cannot find the value of nothing,
    then we cannot have a pair with values of both ~A~ and ~Nothing~, so
    ~(A, Nothing)~, up to isomorphism, is ~Nothing~

    and what about *distributive*?

    =a * (b + c) = (a * b) + (a * c)=

    #+begin_src scala
     def distro[A, B, C]: (A, Either[B, C]) => Either[(A, B), (A, C)] = {
       case (x, either) => either match {
         case Left(y) => Left(x, y)
         case Right(z) => Right(x, z)
       }
     }
    #+end_src

    it fits!

*** More interesting example

    let's solve equations! see =l(a) == 1 + (a * l(a))=

    #+begin_quote
    l(a) = 1 + (a * l(a))

    l(a) - a * l(a) = 1

    l(a)(1 - a) = 1

    l(a) = 1 / (1 - a)

    l(a) = 1 + a + a * a + a * a * a ...
    #+end_quote
    #+begin_src scala
    T[A] = Either[Unit, (A, T[A])]
    #+end_src

    now what is this?
    #+begin_src scala
     sealed trait List[+A]
     case object Nil extends List[Nothing]
     case class Cons[+A](head: A, tail: List[A]) extends List[A]
    #+end_src

** Functor
   说到底，什么是 Category 呢，Category 如此抽象，我们为了研究某种简单的
   性质却要动用整个宇宙的力量 （Universal Construction） 来定义，因为
   Category 是如此的简单，简单到只剩下 Object 和 Morphisms，简单到只剩下
   蕴藏在点与线之间的结构上，说白了，Category 就是结构本身。

   Functor， 听起来像是 Function 但又有什么不一样：如同函数一样，函子是
   某种态射，然而其映射的对象是 Category，而非 Object。

   因此说到底 Functor 就是一种能够保持“结构”的东西，也就是说可以把
   Morphism 连同 Object 一起，从一个 Category 映射到另一个 Category 。

   #+begin_src dot :file img/functor.png :cmdline -Tpng :exports results :cache yes
    digraph G {
      size="3, 3"
      ratio=expand
      subgraph cluster_C {
        style="rounded"
        label=C
        a -> b [label="f"]
      }
      subgraph cluster_D {
        style="rounded"
        label=D
        Fa -> Fb [label="Ff"]
      }

      a -> Fa [label="F", constraint=none]
      b -> Fb [label="F", constraint=none]
    }
   #+end_src

   #+results[423472c42104d4a9c52be393f9e075f468ea7b65]:
   [[file:img/functor.png]]


   因此假设我们有一个 Category C：
   #+begin_src scala
    def f: a => b
   #+end_src

   就可以通过函子 F 映射到 Category D 中：
   #+begin_src scala
    def Ff[a, b]: F[a] => F[b]
   #+end_src

   同理，所有的 Morphism 都可以通过 Functor 来映射：
   #+begin_src dot :file img/functor_with_compose.png :cmdline -Tpng :exports results :cache yes
    digraph G {
      size="8, 4"
      ratio=expand
      subgraph cluster_C {
        style="rounded"
        label=C
        a -> b [label="f"]
        b -> c [label="g"]
        a -> c [label="g∘f"]
        a -> a [label=<id<SUB>a</SUB>>]
      }
      subgraph cluster_D {
        style="rounded"
        label=D
        Fa -> Fb [label="Ff"]
        Fb -> Fc [label="Fg"]
        Fa -> Fc [label="F(g∘f)=Fg∘Ff"]
        Fa -> Fa [label=<Fid<SUB>a</SUB>=id<SUB>Fa</SUB>>]
      }
      a -> Fa [label="F", constraint=none]
      b -> Fb [label="F", constraint=none]
      c -> Fc [label="F", constraint=none]
    }
   #+end_src

   #+results[3aa5cde80532e3a084118572b87228e26cfbe06a]:
   [[file:img/functor_with_compose.png]]

   可以发现：
   #+begin_quote
    F(ida) = idF(a)
    F(g ∘ f) = F(g) ∘ F(f)
   #+end_quote

   正如 Category 可大可小，Functor 也可以在这些或大或小的 Category 之间
   作用；举例来说，存在一个 Functor 将一个 Singleton Category （只有一个
   Object 的 Category，因此所有的 Morphism 都将是 ID）映射到更大的
   Category 中，这完全就类似在 Set 中挑选 Element，也存在一个 Functor 将
   一个 Category 中的每一个 Morphism 都映射到一个 Singleton Category 中
   的 ID，这样的 Functor 叫做 Const Functor。

   #+begin_src dot :file img/pick_functor.png :cmdline -Tpng :exports results :cache yes
    digraph G {
      size="6, 3"
      ratio=expand
      rankdir=LR
      subgraph cluster_C {
        style="rounded"
        label=C
        a -> a [label=<id<SUB>a</SUB>>]
      }
      subgraph cluster_D {
        style="rounded"
        label=D
        Fa -> Fa [label=<Fid<SUB>a</SUB>>]
        Gb -> Gb [label=<Gid<SUB>b</SUB>>]
      }
      a -> Fa [label="F"]
      a -> Gb [label="G"]
    }
   #+end_src

   #+results[fdce2d1ad2053c3817d8426aa625620d9e5a73ce]:
   [[file:img/pick_functor.png]]

   #+begin_src dot :file img/const_functor.png :cmdline -Tpng :exports results :cache yes
    digraph G {
      size="6, 3"
      ratio=expand
      subgraph cluster_C {
        style="rounded"
        label=C
        a -> b [label="f"]
        b -> c [label="g"]
        a -> c [label="g∘f"]
      }
      subgraph cluster_D {
        style="rounded"
        label=D
        const -> const [label=<Fid<SUB>const</SUB>>]
      }
      a -> const [label="F", constraint=none]
      b -> const [label="F", constraint=none]
      c -> const [label="F", constraint=none]
    }
   #+end_src

   #+results[9b3e6b5f9a3fec4c1882f6425bdaea3d86d8b568]:
   [[file:img/const_functor.png]]


*** Functors in programming
    那么 Functor 在程序设计语言中有什么作用呢？

    在程序设计语言的的语境下，Category Theory 不就是 Type Theory 吗？在
    这 Type 这个 Category 中，我们能做的就是用一个个 Functor 把 Type 这
    个 Category 映射到 Type 这个 Category 自己，这样的 Functor 我们称作
    Endofunctor，这样的例子简直数不胜数。

**** Maybe (or Option in scala) Functor
     对于 Option 的定义如下：

     #+begin_src scala
      sealed trait Option[+A]
      case object None extends Option[Nothing]
      case class Some[A](a: A) extends Option[A]
     #+end_src

     ~Option[+A]~ 这样一个 Functor 可以将 ~A~ 类型映射到 ~Option[A]~。

     根据 Functor 的定义，它不光映射一个 Category 中 Object，还会将这个
     Category 中所有的 Morphism 映射到另一个 Category，对应到这里就是：
     ~Option[+A]~ 将 ~A~ 类型中的所有 function 都映射过来（当然在这里
     Functor 都指的是 Endofunctor），即：

     对于任意一个函数：
     #+begin_src scala
      def f: A => B
     #+end_src

     都会经由 ~Option[+A]~ 映射出一个对应的函数：
     #+begin_src scala
      def f1: Option[A] => Option[B]
     #+end_src

     如果手动实现这样一个函数我们会考虑两种情况：
     #+begin_src scala
      def f1[A, B](f: A => B): Option[A] => Option[B] = {
        case None => None
        case Some(x) => Some(f(x))
      }
     #+end_src

     上面这个函数其实是一个叫做 fmap 的高阶函数可以实现对于函数的映射。
     #+begin_src scala
      def fmap[A, B]: (A => B) => (Option[A] => Option[B])
     #+end_src

     有些读者可能发现这其实就是 ~Option.map~，的确如此；事实上 Option 除
     了具有 Functor 的性质之外还具备更多性质，这些性质使得 Option 成为了
     一种叫做 Monad 的东西（而 Monad 实际上是我们给 Monoid in the
     Category of Endofunctors 起的名字，即“自函子范畴上的含幺半群”，如果
     你感兴趣的话）。而学问也总是如此，从特殊到一般，更加泛化，更加通用，
     更加本质，少即是多。

     之前我们提到 Functor 定律：
     #+begin_quote
     F(ida) = idF(a)
     F(g ∘ f) = F(g) ∘ F(f)
     #+end_quote

     让我们通过等式推导来证明这一点。

     #+begin_src scala
      def identity[A](x: A) = x

      // for the first law
      fmap(identity) == identity

      // case None
      fmap(identity(None)) == None == identity(None)

      // case Some(x)
      fmap(identity(Some(x))) == Some(identity(x)) == Some(x) = identity(Some(x))

      // for the second law
      fmap(g compose f) == fmap(g) compose fmap(f)

      // case None
      fmap((g compose f)(None)) == None == fmap(g(None)) == fmap(g(fmap(f(None))))

      // case Some(x)
      fmap((g compose f)(Some(x))) == Some((g compose f)x) == Some(g(f(x))) == fmap(g(Some(f(x)))) == fmap(g(fmap(f(Some(x)))))
     #+end_src

**** List Functor
     好吧，也许并不是每个语言都有具备良好定义的 Maybe (Option) 这样的
     Functor，更加常见的情况下我们确实没有很好的办法来表达 Option 这样的
     概念；这也是那个著名的把 null type 的发明称作 Billion-dollar
     mistake 的主要原因，因为人们并不总是能够意识到在 Java 这样的语言中，
     每一个引用类型都是这个类型本身和 null (Singleton type) 的 Coproduct，
     因此也不会想到通过 Functor 来表达可能会为空的值。

     但即便如此，我们依然每天都在和 Functor 打交道，比如 List，或者在其
     他语言中 Array/Slice，所谓不同的形式表达相同的内容就是如此。

     #+begin_src scala
      sealed trait List[+E]
      case object Nil extends List[Nothing]
      case class Cons[+E](head: E, tail: List[E]) extends List[E]
     #+end_src

     而 List 的 ~fmap~ 定义如下：

     #+begin_src scala
      def fmap[A, B]: (A => B) => (List[A] => List[B]) =
        (f: A => B) => {
          (ls: List[A]) => {
            case Nil => Nil
            case Cons(x, t) => Cons(f(x), fmap(f)(t))
          }
        }
     #+end_src

     甚至可以在 python 中实现 fmap
     #+begin_src python
      def fmap(f: Callable[[A], B]) -> Callable[[List[A]], List[B]]:
          def inner(ls: List[A]) -> List[B]:
              if len(ls) == 0:
                  return ls
              return [f(ls[0])] + fmap(f)(ls[1:])
          return inner

      def fmap(f: Callable[[A], B]) -> Callable[[List[A]], List[B]]:
          def inner(ls: List[A]) -> List[B]:
              newls = []
              for x in ls:
                  newls.append(f(x))
          return inner

      def fmap(f: Callable[[A], B]) -> Callable[[List[A]], List[B]]:
          def inner(ls: List[A]) -> List[B]:
              return [f(x) for x in ls]
          return inner

      def fmap(f: Callable[[A], B]) -> Callable[[List[A]], List[B]]:
          return lambda ls: [f(x) for x in ls]
     #+end_src


**** Reader Functor
     List 也许是一个常用的 Functor，但接下来我们要考虑一个更加常用但是我
     们却几乎无法自知的 Functor： Reader Functor。

     作为 Type 到 Type 的映射，Reader Functor 会把类型 A 映射为一个返回
     A 的函数类型————没错，函数也是一种类型，我们还没有深入研究过函数类
     型，这里就先简单做一下介绍：

     #+begin_src scala
      Function1[A, B]

      // or
      A => B
     #+end_src

     此时假设我们固定了第一个参数，假设叫做 ~R~，那么它依然需要另外一个
     类型参数才能构成一个完整的类型，这就是为什么它也是一个 Functor，也
     就是我们刚才提到的接受固定的 ~R~ 类型参数并返回 ~A~ 类型的函数类型。

     那么这个 Functor 的 fmap 就会有如下定义：

     #+begin_src scala
      def fmap[A, B]: (A => B) => ((R => A) => (R => B))

      // remenber function call is assosiative
      def fmap[A, B]: (A => B) => (R => A) => (R => B) = {
        (f: A => B) => (g: R => A) = f compose g
      }
     #+end_src
